// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListActiveConnections request
	ListActiveConnections(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActiveConnectionWithBody request with any body
	DeleteActiveConnectionWithBody(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteActiveConnection(ctx context.Context, dataSource DataSource, body DeleteActiveConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectionGroups request
	ListConnectionGroups(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConnectionGroupWithBody request with any body
	CreateConnectionGroupWithBody(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnectionGroup(ctx context.Context, dataSource DataSource, body CreateConnectionGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConnectionGroup request
	DeleteConnectionGroup(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionGroup request
	GetConnectionGroup(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConnectionGroupWithBody request with any body
	UpdateConnectionGroupWithBody(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConnectionGroup(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, body UpdateConnectionGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionGroupTree request
	GetConnectionGroupTree(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnections request
	ListConnections(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConnectionWithBody request with any body
	CreateConnectionWithBody(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnection(ctx context.Context, dataSource DataSource, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConnection request
	DeleteConnection(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnection request
	GetConnection(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConnectionWithBody request with any body
	UpdateConnectionWithBody(ctx context.Context, dataSource DataSource, connectionID ConnectionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConnection(ctx context.Context, dataSource DataSource, connectionID ConnectionID, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionParameters request
	GetConnectionParameters(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelf request
	GetSelf(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfPermissions request
	GetSelfPermissions(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserGroups request
	ListUserGroups(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserGroup request
	CreateUserGroup(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserGroup request
	DeleteUserGroup(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroup request
	GetUserGroup(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserGroupWithBody request with any body
	UpdateUserGroupWithBody(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserGroup(ctx context.Context, dataSource DataSource, group Group, body UpdateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyUserGroupMemberGroupsWithBody request with any body
	ModifyUserGroupMemberGroupsWithBody(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyUserGroupMemberGroups(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupMemberGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyUserGroupMembersWithBody request with any body
	ModifyUserGroupMembersWithBody(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyUserGroupMembers(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroupPermissions request
	GetUserGroupPermissions(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyUserGroupPermissionsWithBody request with any body
	ModifyUserGroupPermissionsWithBody(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyUserGroupPermissions(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsers request
	ListUsers(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, dataSource DataSource, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, dataSource DataSource, username Username, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserPasswordWithBody request with any body
	UpdateUserPasswordWithBody(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserPassword(ctx context.Context, dataSource DataSource, username Username, body UpdateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPermissions request
	GetUserPermissions(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyUserPermissionsWithBody request with any body
	ModifyUserPermissionsWithBody(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyUserPermissions(ctx context.Context, dataSource DataSource, username Username, body ModifyUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyUserGroupsOfUserWithBody request with any body
	ModifyUserGroupsOfUserWithBody(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyUserGroupsOfUser(ctx context.Context, dataSource DataSource, username Username, body ModifyUserGroupsOfUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrValidateTokenWithBody request with any body
	CreateOrValidateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrValidateTokenWithFormdataBody(ctx context.Context, body CreateOrValidateTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteToken request
	DeleteToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListActiveConnections(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListActiveConnectionsRequest(c.Server, dataSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActiveConnectionWithBody(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActiveConnectionRequestWithBody(c.Server, dataSource, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActiveConnection(ctx context.Context, dataSource DataSource, body DeleteActiveConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActiveConnectionRequest(c.Server, dataSource, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectionGroups(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectionGroupsRequest(c.Server, dataSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectionGroupWithBody(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionGroupRequestWithBody(c.Server, dataSource, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectionGroup(ctx context.Context, dataSource DataSource, body CreateConnectionGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionGroupRequest(c.Server, dataSource, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnectionGroup(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectionGroupRequest(c.Server, dataSource, connectionGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionGroup(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionGroupRequest(c.Server, dataSource, connectionGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectionGroupWithBody(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionGroupRequestWithBody(c.Server, dataSource, connectionGroupID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectionGroup(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, body UpdateConnectionGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionGroupRequest(c.Server, dataSource, connectionGroupID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionGroupTree(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionGroupTreeRequest(c.Server, dataSource, connectionGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnections(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectionsRequest(c.Server, dataSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectionWithBody(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionRequestWithBody(c.Server, dataSource, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnection(ctx context.Context, dataSource DataSource, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionRequest(c.Server, dataSource, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnection(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectionRequest(c.Server, dataSource, connectionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnection(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionRequest(c.Server, dataSource, connectionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectionWithBody(ctx context.Context, dataSource DataSource, connectionID ConnectionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionRequestWithBody(c.Server, dataSource, connectionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnection(ctx context.Context, dataSource DataSource, connectionID ConnectionID, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionRequest(c.Server, dataSource, connectionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionParameters(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionParametersRequest(c.Server, dataSource, connectionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelf(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfRequest(c.Server, dataSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfPermissions(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfPermissionsRequest(c.Server, dataSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserGroups(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserGroupsRequest(c.Server, dataSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserGroup(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserGroupRequest(c.Server, dataSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserGroup(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserGroupRequest(c.Server, dataSource, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroup(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupRequest(c.Server, dataSource, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserGroupWithBody(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserGroupRequestWithBody(c.Server, dataSource, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserGroup(ctx context.Context, dataSource DataSource, group Group, body UpdateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserGroupRequest(c.Server, dataSource, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserGroupMemberGroupsWithBody(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserGroupMemberGroupsRequestWithBody(c.Server, dataSource, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserGroupMemberGroups(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupMemberGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserGroupMemberGroupsRequest(c.Server, dataSource, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserGroupMembersWithBody(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserGroupMembersRequestWithBody(c.Server, dataSource, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserGroupMembers(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserGroupMembersRequest(c.Server, dataSource, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroupPermissions(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupPermissionsRequest(c.Server, dataSource, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserGroupPermissionsWithBody(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserGroupPermissionsRequestWithBody(c.Server, dataSource, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserGroupPermissions(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserGroupPermissionsRequest(c.Server, dataSource, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsers(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersRequest(c.Server, dataSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, dataSource, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, dataSource DataSource, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, dataSource, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, dataSource, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, dataSource, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, dataSource, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, dataSource DataSource, username Username, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, dataSource, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPasswordWithBody(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPasswordRequestWithBody(c.Server, dataSource, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserPassword(ctx context.Context, dataSource DataSource, username Username, body UpdateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserPasswordRequest(c.Server, dataSource, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPermissions(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPermissionsRequest(c.Server, dataSource, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserPermissionsWithBody(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserPermissionsRequestWithBody(c.Server, dataSource, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserPermissions(ctx context.Context, dataSource DataSource, username Username, body ModifyUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserPermissionsRequest(c.Server, dataSource, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserGroupsOfUserWithBody(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserGroupsOfUserRequestWithBody(c.Server, dataSource, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserGroupsOfUser(ctx context.Context, dataSource DataSource, username Username, body ModifyUserGroupsOfUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserGroupsOfUserRequest(c.Server, dataSource, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrValidateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrValidateTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrValidateTokenWithFormdataBody(ctx context.Context, body CreateOrValidateTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrValidateTokenRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListActiveConnectionsRequest generates requests for ListActiveConnections
func NewListActiveConnectionsRequest(server string, dataSource DataSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/activeConnections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteActiveConnectionRequest calls the generic DeleteActiveConnection builder with application/json body
func NewDeleteActiveConnectionRequest(server string, dataSource DataSource, body DeleteActiveConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteActiveConnectionRequestWithBody(server, dataSource, "application/json", bodyReader)
}

// NewDeleteActiveConnectionRequestWithBody generates requests for DeleteActiveConnection with any type of body
func NewDeleteActiveConnectionRequestWithBody(server string, dataSource DataSource, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/activeConnections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConnectionGroupsRequest generates requests for ListConnectionGroups
func NewListConnectionGroupsRequest(server string, dataSource DataSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connectionGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateConnectionGroupRequest calls the generic CreateConnectionGroup builder with application/json body
func NewCreateConnectionGroupRequest(server string, dataSource DataSource, body CreateConnectionGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectionGroupRequestWithBody(server, dataSource, "application/json", bodyReader)
}

// NewCreateConnectionGroupRequestWithBody generates requests for CreateConnectionGroup with any type of body
func NewCreateConnectionGroupRequestWithBody(server string, dataSource DataSource, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connectionGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConnectionGroupRequest generates requests for DeleteConnectionGroup
func NewDeleteConnectionGroupRequest(server string, dataSource DataSource, connectionGroupID ConnectionGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connection_group", runtime.ParamLocationPath, connectionGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connectionGroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionGroupRequest generates requests for GetConnectionGroup
func NewGetConnectionGroupRequest(server string, dataSource DataSource, connectionGroupID ConnectionGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connection_group", runtime.ParamLocationPath, connectionGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connectionGroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConnectionGroupRequest calls the generic UpdateConnectionGroup builder with application/json body
func NewUpdateConnectionGroupRequest(server string, dataSource DataSource, connectionGroupID ConnectionGroupID, body UpdateConnectionGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConnectionGroupRequestWithBody(server, dataSource, connectionGroupID, "application/json", bodyReader)
}

// NewUpdateConnectionGroupRequestWithBody generates requests for UpdateConnectionGroup with any type of body
func NewUpdateConnectionGroupRequestWithBody(server string, dataSource DataSource, connectionGroupID ConnectionGroupID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connection_group", runtime.ParamLocationPath, connectionGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connectionGroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConnectionGroupTreeRequest generates requests for GetConnectionGroupTree
func NewGetConnectionGroupTreeRequest(server string, dataSource DataSource, connectionGroupID ConnectionGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connection_group", runtime.ParamLocationPath, connectionGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connectionGroups/%s/tree", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListConnectionsRequest generates requests for ListConnections
func NewListConnectionsRequest(server string, dataSource DataSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateConnectionRequest calls the generic CreateConnection builder with application/json body
func NewCreateConnectionRequest(server string, dataSource DataSource, body CreateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectionRequestWithBody(server, dataSource, "application/json", bodyReader)
}

// NewCreateConnectionRequestWithBody generates requests for CreateConnection with any type of body
func NewCreateConnectionRequestWithBody(server string, dataSource DataSource, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConnectionRequest generates requests for DeleteConnection
func NewDeleteConnectionRequest(server string, dataSource DataSource, connectionID ConnectionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connection", runtime.ParamLocationPath, connectionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionRequest generates requests for GetConnection
func NewGetConnectionRequest(server string, dataSource DataSource, connectionID ConnectionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connection", runtime.ParamLocationPath, connectionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConnectionRequest calls the generic UpdateConnection builder with application/json body
func NewUpdateConnectionRequest(server string, dataSource DataSource, connectionID ConnectionID, body UpdateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConnectionRequestWithBody(server, dataSource, connectionID, "application/json", bodyReader)
}

// NewUpdateConnectionRequestWithBody generates requests for UpdateConnection with any type of body
func NewUpdateConnectionRequestWithBody(server string, dataSource DataSource, connectionID ConnectionID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connection", runtime.ParamLocationPath, connectionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConnectionParametersRequest generates requests for GetConnectionParameters
func NewGetConnectionParametersRequest(server string, dataSource DataSource, connectionID ConnectionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connection", runtime.ParamLocationPath, connectionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/connections/%s/parameters", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfRequest generates requests for GetSelf
func NewGetSelfRequest(server string, dataSource DataSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/self", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfPermissionsRequest generates requests for GetSelfPermissions
func NewGetSelfPermissionsRequest(server string, dataSource DataSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/self/effectivePermissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserGroupsRequest generates requests for ListUserGroups
func NewListUserGroupsRequest(server string, dataSource DataSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserGroupRequest generates requests for CreateUserGroup
func NewCreateUserGroupRequest(server string, dataSource DataSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserGroupRequest generates requests for DeleteUserGroup
func NewDeleteUserGroupRequest(server string, dataSource DataSource, group Group) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupRequest generates requests for GetUserGroup
func NewGetUserGroupRequest(server string, dataSource DataSource, group Group) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserGroupRequest calls the generic UpdateUserGroup builder with application/json body
func NewUpdateUserGroupRequest(server string, dataSource DataSource, group Group, body UpdateUserGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserGroupRequestWithBody(server, dataSource, group, "application/json", bodyReader)
}

// NewUpdateUserGroupRequestWithBody generates requests for UpdateUserGroup with any type of body
func NewUpdateUserGroupRequestWithBody(server string, dataSource DataSource, group Group, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModifyUserGroupMemberGroupsRequest calls the generic ModifyUserGroupMemberGroups builder with application/json body
func NewModifyUserGroupMemberGroupsRequest(server string, dataSource DataSource, group Group, body ModifyUserGroupMemberGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyUserGroupMemberGroupsRequestWithBody(server, dataSource, group, "application/json", bodyReader)
}

// NewModifyUserGroupMemberGroupsRequestWithBody generates requests for ModifyUserGroupMemberGroups with any type of body
func NewModifyUserGroupMemberGroupsRequestWithBody(server string, dataSource DataSource, group Group, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups/%s/memberUserGroups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModifyUserGroupMembersRequest calls the generic ModifyUserGroupMembers builder with application/json body
func NewModifyUserGroupMembersRequest(server string, dataSource DataSource, group Group, body ModifyUserGroupMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyUserGroupMembersRequestWithBody(server, dataSource, group, "application/json", bodyReader)
}

// NewModifyUserGroupMembersRequestWithBody generates requests for ModifyUserGroupMembers with any type of body
func NewModifyUserGroupMembersRequestWithBody(server string, dataSource DataSource, group Group, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups/%s/memberUsers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserGroupPermissionsRequest generates requests for GetUserGroupPermissions
func NewGetUserGroupPermissionsRequest(server string, dataSource DataSource, group Group) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyUserGroupPermissionsRequest calls the generic ModifyUserGroupPermissions builder with application/json body
func NewModifyUserGroupPermissionsRequest(server string, dataSource DataSource, group Group, body ModifyUserGroupPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyUserGroupPermissionsRequestWithBody(server, dataSource, group, "application/json", bodyReader)
}

// NewModifyUserGroupPermissionsRequestWithBody generates requests for ModifyUserGroupPermissions with any type of body
func NewModifyUserGroupPermissionsRequestWithBody(server string, dataSource DataSource, group Group, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/userGroups/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUsersRequest generates requests for ListUsers
func NewListUsersRequest(server string, dataSource DataSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, dataSource DataSource, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, dataSource, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, dataSource DataSource, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, dataSource DataSource, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, dataSource DataSource, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, dataSource DataSource, username Username, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, dataSource, username, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, dataSource DataSource, username Username, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserPasswordRequest calls the generic UpdateUserPassword builder with application/json body
func NewUpdateUserPasswordRequest(server string, dataSource DataSource, username Username, body UpdateUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserPasswordRequestWithBody(server, dataSource, username, "application/json", bodyReader)
}

// NewUpdateUserPasswordRequestWithBody generates requests for UpdateUserPassword with any type of body
func NewUpdateUserPasswordRequestWithBody(server string, dataSource DataSource, username Username, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users/%s/password", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserPermissionsRequest generates requests for GetUserPermissions
func NewGetUserPermissionsRequest(server string, dataSource DataSource, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyUserPermissionsRequest calls the generic ModifyUserPermissions builder with application/json body
func NewModifyUserPermissionsRequest(server string, dataSource DataSource, username Username, body ModifyUserPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyUserPermissionsRequestWithBody(server, dataSource, username, "application/json", bodyReader)
}

// NewModifyUserPermissionsRequestWithBody generates requests for ModifyUserPermissions with any type of body
func NewModifyUserPermissionsRequestWithBody(server string, dataSource DataSource, username Username, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModifyUserGroupsOfUserRequest calls the generic ModifyUserGroupsOfUser builder with application/json body
func NewModifyUserGroupsOfUserRequest(server string, dataSource DataSource, username Username, body ModifyUserGroupsOfUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyUserGroupsOfUserRequestWithBody(server, dataSource, username, "application/json", bodyReader)
}

// NewModifyUserGroupsOfUserRequestWithBody generates requests for ModifyUserGroupsOfUser with any type of body
func NewModifyUserGroupsOfUserRequestWithBody(server string, dataSource DataSource, username Username, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "data_source", runtime.ParamLocationPath, dataSource)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session/data/%s/users/%s/userGroups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrValidateTokenRequestWithFormdataBody calls the generic CreateOrValidateToken builder with application/x-www-form-urlencoded body
func NewCreateOrValidateTokenRequestWithFormdataBody(server string, body CreateOrValidateTokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateOrValidateTokenRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateOrValidateTokenRequestWithBody generates requests for CreateOrValidateToken with any type of body
func NewCreateOrValidateTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTokenRequest generates requests for DeleteToken
func NewDeleteTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListActiveConnectionsWithResponse request
	ListActiveConnectionsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListActiveConnectionsResponse, error)

	// DeleteActiveConnectionWithBodyWithResponse request with any body
	DeleteActiveConnectionWithBodyWithResponse(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteActiveConnectionResponse, error)

	DeleteActiveConnectionWithResponse(ctx context.Context, dataSource DataSource, body DeleteActiveConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteActiveConnectionResponse, error)

	// ListConnectionGroupsWithResponse request
	ListConnectionGroupsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListConnectionGroupsResponse, error)

	// CreateConnectionGroupWithBodyWithResponse request with any body
	CreateConnectionGroupWithBodyWithResponse(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionGroupResponse, error)

	CreateConnectionGroupWithResponse(ctx context.Context, dataSource DataSource, body CreateConnectionGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionGroupResponse, error)

	// DeleteConnectionGroupWithResponse request
	DeleteConnectionGroupWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*DeleteConnectionGroupResponse, error)

	// GetConnectionGroupWithResponse request
	GetConnectionGroupWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*GetConnectionGroupResponse, error)

	// UpdateConnectionGroupWithBodyWithResponse request with any body
	UpdateConnectionGroupWithBodyWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionGroupResponse, error)

	UpdateConnectionGroupWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, body UpdateConnectionGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionGroupResponse, error)

	// GetConnectionGroupTreeWithResponse request
	GetConnectionGroupTreeWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*GetConnectionGroupTreeResponse, error)

	// ListConnectionsWithResponse request
	ListConnectionsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListConnectionsResponse, error)

	// CreateConnectionWithBodyWithResponse request with any body
	CreateConnectionWithBodyWithResponse(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error)

	CreateConnectionWithResponse(ctx context.Context, dataSource DataSource, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error)

	// DeleteConnectionWithResponse request
	DeleteConnectionWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error)

	// GetConnectionWithResponse request
	GetConnectionWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error)

	// UpdateConnectionWithBodyWithResponse request with any body
	UpdateConnectionWithBodyWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error)

	UpdateConnectionWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error)

	// GetConnectionParametersWithResponse request
	GetConnectionParametersWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*GetConnectionParametersResponse, error)

	// GetSelfWithResponse request
	GetSelfWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*GetSelfResponse, error)

	// GetSelfPermissionsWithResponse request
	GetSelfPermissionsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*GetSelfPermissionsResponse, error)

	// ListUserGroupsWithResponse request
	ListUserGroupsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListUserGroupsResponse, error)

	// CreateUserGroupWithResponse request
	CreateUserGroupWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*CreateUserGroupResponse, error)

	// DeleteUserGroupWithResponse request
	DeleteUserGroupWithResponse(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*DeleteUserGroupResponse, error)

	// GetUserGroupWithResponse request
	GetUserGroupWithResponse(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*GetUserGroupResponse, error)

	// UpdateUserGroupWithBodyWithResponse request with any body
	UpdateUserGroupWithBodyWithResponse(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserGroupResponse, error)

	UpdateUserGroupWithResponse(ctx context.Context, dataSource DataSource, group Group, body UpdateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserGroupResponse, error)

	// ModifyUserGroupMemberGroupsWithBodyWithResponse request with any body
	ModifyUserGroupMemberGroupsWithBodyWithResponse(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserGroupMemberGroupsResponse, error)

	ModifyUserGroupMemberGroupsWithResponse(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupMemberGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserGroupMemberGroupsResponse, error)

	// ModifyUserGroupMembersWithBodyWithResponse request with any body
	ModifyUserGroupMembersWithBodyWithResponse(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserGroupMembersResponse, error)

	ModifyUserGroupMembersWithResponse(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserGroupMembersResponse, error)

	// GetUserGroupPermissionsWithResponse request
	GetUserGroupPermissionsWithResponse(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*GetUserGroupPermissionsResponse, error)

	// ModifyUserGroupPermissionsWithBodyWithResponse request with any body
	ModifyUserGroupPermissionsWithBodyWithResponse(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserGroupPermissionsResponse, error)

	ModifyUserGroupPermissionsWithResponse(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserGroupPermissionsResponse, error)

	// ListUsersWithResponse request
	ListUsersWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListUsersResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, dataSource DataSource, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, dataSource DataSource, username Username, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// UpdateUserPasswordWithBodyWithResponse request with any body
	UpdateUserPasswordWithBodyWithResponse(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPasswordResponse, error)

	UpdateUserPasswordWithResponse(ctx context.Context, dataSource DataSource, username Username, body UpdateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPasswordResponse, error)

	// GetUserPermissionsWithResponse request
	GetUserPermissionsWithResponse(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*GetUserPermissionsResponse, error)

	// ModifyUserPermissionsWithBodyWithResponse request with any body
	ModifyUserPermissionsWithBodyWithResponse(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserPermissionsResponse, error)

	ModifyUserPermissionsWithResponse(ctx context.Context, dataSource DataSource, username Username, body ModifyUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserPermissionsResponse, error)

	// ModifyUserGroupsOfUserWithBodyWithResponse request with any body
	ModifyUserGroupsOfUserWithBodyWithResponse(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserGroupsOfUserResponse, error)

	ModifyUserGroupsOfUserWithResponse(ctx context.Context, dataSource DataSource, username Username, body ModifyUserGroupsOfUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserGroupsOfUserResponse, error)

	// CreateOrValidateTokenWithBodyWithResponse request with any body
	CreateOrValidateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrValidateTokenResponse, error)

	CreateOrValidateTokenWithFormdataBodyWithResponse(ctx context.Context, body CreateOrValidateTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateOrValidateTokenResponse, error)

	// DeleteTokenWithResponse request
	DeleteTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*DeleteTokenResponse, error)
}

type ListActiveConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActiveConnections
}

// Status returns HTTPResponse.Status
func (r ListActiveConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListActiveConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActiveConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteActiveConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActiveConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectionGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionGroups
}

// Status returns HTTPResponse.Status
func (r ListConnectionGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectionGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConnectionGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionGroup
}

// Status returns HTTPResponse.Status
func (r CreateConnectionGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectionGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConnectionGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConnectionGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConnectionGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionGroup
}

// Status returns HTTPResponse.Status
func (r GetConnectionGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConnectionGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateConnectionGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConnectionGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionGroupTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionGroupTree
}

// Status returns HTTPResponse.Status
func (r GetConnectionGroupTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionGroupTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Connections
}

// Status returns HTTPResponse.Status
func (r ListConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Connection
}

// Status returns HTTPResponse.Status
func (r CreateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Connection
}

// Status returns HTTPResponse.Status
func (r GetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionParameters
}

// Status returns HTTPResponse.Status
func (r GetConnectionParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetSelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Permissions
}

// Status returns HTTPResponse.Status
func (r GetSelfPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGroups
}

// Status returns HTTPResponse.Status
func (r ListUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGroup
}

// Status returns HTTPResponse.Status
func (r CreateUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGroup
}

// Status returns HTTPResponse.Status
func (r GetUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyUserGroupMemberGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModifyUserGroupMemberGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyUserGroupMemberGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyUserGroupMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModifyUserGroupMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyUserGroupMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Permissions
}

// Status returns HTTPResponse.Status
func (r GetUserGroupPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyUserGroupPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModifyUserGroupPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyUserGroupPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Users
}

// Status returns HTTPResponse.Status
func (r ListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Permissions
}

// Status returns HTTPResponse.Status
func (r GetUserPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyUserPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModifyUserPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyUserPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyUserGroupsOfUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModifyUserGroupsOfUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyUserGroupsOfUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrValidateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Token
}

// Status returns HTTPResponse.Status
func (r CreateOrValidateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrValidateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListActiveConnectionsWithResponse request returning *ListActiveConnectionsResponse
func (c *ClientWithResponses) ListActiveConnectionsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListActiveConnectionsResponse, error) {
	rsp, err := c.ListActiveConnections(ctx, dataSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListActiveConnectionsResponse(rsp)
}

// DeleteActiveConnectionWithBodyWithResponse request with arbitrary body returning *DeleteActiveConnectionResponse
func (c *ClientWithResponses) DeleteActiveConnectionWithBodyWithResponse(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteActiveConnectionResponse, error) {
	rsp, err := c.DeleteActiveConnectionWithBody(ctx, dataSource, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActiveConnectionResponse(rsp)
}

func (c *ClientWithResponses) DeleteActiveConnectionWithResponse(ctx context.Context, dataSource DataSource, body DeleteActiveConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteActiveConnectionResponse, error) {
	rsp, err := c.DeleteActiveConnection(ctx, dataSource, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActiveConnectionResponse(rsp)
}

// ListConnectionGroupsWithResponse request returning *ListConnectionGroupsResponse
func (c *ClientWithResponses) ListConnectionGroupsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListConnectionGroupsResponse, error) {
	rsp, err := c.ListConnectionGroups(ctx, dataSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectionGroupsResponse(rsp)
}

// CreateConnectionGroupWithBodyWithResponse request with arbitrary body returning *CreateConnectionGroupResponse
func (c *ClientWithResponses) CreateConnectionGroupWithBodyWithResponse(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionGroupResponse, error) {
	rsp, err := c.CreateConnectionGroupWithBody(ctx, dataSource, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectionGroupWithResponse(ctx context.Context, dataSource DataSource, body CreateConnectionGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionGroupResponse, error) {
	rsp, err := c.CreateConnectionGroup(ctx, dataSource, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionGroupResponse(rsp)
}

// DeleteConnectionGroupWithResponse request returning *DeleteConnectionGroupResponse
func (c *ClientWithResponses) DeleteConnectionGroupWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*DeleteConnectionGroupResponse, error) {
	rsp, err := c.DeleteConnectionGroup(ctx, dataSource, connectionGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectionGroupResponse(rsp)
}

// GetConnectionGroupWithResponse request returning *GetConnectionGroupResponse
func (c *ClientWithResponses) GetConnectionGroupWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*GetConnectionGroupResponse, error) {
	rsp, err := c.GetConnectionGroup(ctx, dataSource, connectionGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionGroupResponse(rsp)
}

// UpdateConnectionGroupWithBodyWithResponse request with arbitrary body returning *UpdateConnectionGroupResponse
func (c *ClientWithResponses) UpdateConnectionGroupWithBodyWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionGroupResponse, error) {
	rsp, err := c.UpdateConnectionGroupWithBody(ctx, dataSource, connectionGroupID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateConnectionGroupWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, body UpdateConnectionGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionGroupResponse, error) {
	rsp, err := c.UpdateConnectionGroup(ctx, dataSource, connectionGroupID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionGroupResponse(rsp)
}

// GetConnectionGroupTreeWithResponse request returning *GetConnectionGroupTreeResponse
func (c *ClientWithResponses) GetConnectionGroupTreeWithResponse(ctx context.Context, dataSource DataSource, connectionGroupID ConnectionGroupID, reqEditors ...RequestEditorFn) (*GetConnectionGroupTreeResponse, error) {
	rsp, err := c.GetConnectionGroupTree(ctx, dataSource, connectionGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionGroupTreeResponse(rsp)
}

// ListConnectionsWithResponse request returning *ListConnectionsResponse
func (c *ClientWithResponses) ListConnectionsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListConnectionsResponse, error) {
	rsp, err := c.ListConnections(ctx, dataSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectionsResponse(rsp)
}

// CreateConnectionWithBodyWithResponse request with arbitrary body returning *CreateConnectionResponse
func (c *ClientWithResponses) CreateConnectionWithBodyWithResponse(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error) {
	rsp, err := c.CreateConnectionWithBody(ctx, dataSource, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectionWithResponse(ctx context.Context, dataSource DataSource, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error) {
	rsp, err := c.CreateConnection(ctx, dataSource, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionResponse(rsp)
}

// DeleteConnectionWithResponse request returning *DeleteConnectionResponse
func (c *ClientWithResponses) DeleteConnectionWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error) {
	rsp, err := c.DeleteConnection(ctx, dataSource, connectionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectionResponse(rsp)
}

// GetConnectionWithResponse request returning *GetConnectionResponse
func (c *ClientWithResponses) GetConnectionWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error) {
	rsp, err := c.GetConnection(ctx, dataSource, connectionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionResponse(rsp)
}

// UpdateConnectionWithBodyWithResponse request with arbitrary body returning *UpdateConnectionResponse
func (c *ClientWithResponses) UpdateConnectionWithBodyWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error) {
	rsp, err := c.UpdateConnectionWithBody(ctx, dataSource, connectionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateConnectionWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error) {
	rsp, err := c.UpdateConnection(ctx, dataSource, connectionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionResponse(rsp)
}

// GetConnectionParametersWithResponse request returning *GetConnectionParametersResponse
func (c *ClientWithResponses) GetConnectionParametersWithResponse(ctx context.Context, dataSource DataSource, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*GetConnectionParametersResponse, error) {
	rsp, err := c.GetConnectionParameters(ctx, dataSource, connectionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionParametersResponse(rsp)
}

// GetSelfWithResponse request returning *GetSelfResponse
func (c *ClientWithResponses) GetSelfWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*GetSelfResponse, error) {
	rsp, err := c.GetSelf(ctx, dataSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfResponse(rsp)
}

// GetSelfPermissionsWithResponse request returning *GetSelfPermissionsResponse
func (c *ClientWithResponses) GetSelfPermissionsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*GetSelfPermissionsResponse, error) {
	rsp, err := c.GetSelfPermissions(ctx, dataSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfPermissionsResponse(rsp)
}

// ListUserGroupsWithResponse request returning *ListUserGroupsResponse
func (c *ClientWithResponses) ListUserGroupsWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListUserGroupsResponse, error) {
	rsp, err := c.ListUserGroups(ctx, dataSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserGroupsResponse(rsp)
}

// CreateUserGroupWithResponse request returning *CreateUserGroupResponse
func (c *ClientWithResponses) CreateUserGroupWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*CreateUserGroupResponse, error) {
	rsp, err := c.CreateUserGroup(ctx, dataSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserGroupResponse(rsp)
}

// DeleteUserGroupWithResponse request returning *DeleteUserGroupResponse
func (c *ClientWithResponses) DeleteUserGroupWithResponse(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*DeleteUserGroupResponse, error) {
	rsp, err := c.DeleteUserGroup(ctx, dataSource, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserGroupResponse(rsp)
}

// GetUserGroupWithResponse request returning *GetUserGroupResponse
func (c *ClientWithResponses) GetUserGroupWithResponse(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*GetUserGroupResponse, error) {
	rsp, err := c.GetUserGroup(ctx, dataSource, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupResponse(rsp)
}

// UpdateUserGroupWithBodyWithResponse request with arbitrary body returning *UpdateUserGroupResponse
func (c *ClientWithResponses) UpdateUserGroupWithBodyWithResponse(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserGroupResponse, error) {
	rsp, err := c.UpdateUserGroupWithBody(ctx, dataSource, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserGroupWithResponse(ctx context.Context, dataSource DataSource, group Group, body UpdateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserGroupResponse, error) {
	rsp, err := c.UpdateUserGroup(ctx, dataSource, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserGroupResponse(rsp)
}

// ModifyUserGroupMemberGroupsWithBodyWithResponse request with arbitrary body returning *ModifyUserGroupMemberGroupsResponse
func (c *ClientWithResponses) ModifyUserGroupMemberGroupsWithBodyWithResponse(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserGroupMemberGroupsResponse, error) {
	rsp, err := c.ModifyUserGroupMemberGroupsWithBody(ctx, dataSource, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserGroupMemberGroupsResponse(rsp)
}

func (c *ClientWithResponses) ModifyUserGroupMemberGroupsWithResponse(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupMemberGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserGroupMemberGroupsResponse, error) {
	rsp, err := c.ModifyUserGroupMemberGroups(ctx, dataSource, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserGroupMemberGroupsResponse(rsp)
}

// ModifyUserGroupMembersWithBodyWithResponse request with arbitrary body returning *ModifyUserGroupMembersResponse
func (c *ClientWithResponses) ModifyUserGroupMembersWithBodyWithResponse(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserGroupMembersResponse, error) {
	rsp, err := c.ModifyUserGroupMembersWithBody(ctx, dataSource, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserGroupMembersResponse(rsp)
}

func (c *ClientWithResponses) ModifyUserGroupMembersWithResponse(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserGroupMembersResponse, error) {
	rsp, err := c.ModifyUserGroupMembers(ctx, dataSource, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserGroupMembersResponse(rsp)
}

// GetUserGroupPermissionsWithResponse request returning *GetUserGroupPermissionsResponse
func (c *ClientWithResponses) GetUserGroupPermissionsWithResponse(ctx context.Context, dataSource DataSource, group Group, reqEditors ...RequestEditorFn) (*GetUserGroupPermissionsResponse, error) {
	rsp, err := c.GetUserGroupPermissions(ctx, dataSource, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupPermissionsResponse(rsp)
}

// ModifyUserGroupPermissionsWithBodyWithResponse request with arbitrary body returning *ModifyUserGroupPermissionsResponse
func (c *ClientWithResponses) ModifyUserGroupPermissionsWithBodyWithResponse(ctx context.Context, dataSource DataSource, group Group, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserGroupPermissionsResponse, error) {
	rsp, err := c.ModifyUserGroupPermissionsWithBody(ctx, dataSource, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserGroupPermissionsResponse(rsp)
}

func (c *ClientWithResponses) ModifyUserGroupPermissionsWithResponse(ctx context.Context, dataSource DataSource, group Group, body ModifyUserGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserGroupPermissionsResponse, error) {
	rsp, err := c.ModifyUserGroupPermissions(ctx, dataSource, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserGroupPermissionsResponse(rsp)
}

// ListUsersWithResponse request returning *ListUsersResponse
func (c *ClientWithResponses) ListUsersWithResponse(ctx context.Context, dataSource DataSource, reqEditors ...RequestEditorFn) (*ListUsersResponse, error) {
	rsp, err := c.ListUsers(ctx, dataSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, dataSource DataSource, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, dataSource, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, dataSource DataSource, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, dataSource, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, dataSource, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, dataSource, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, dataSource, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, dataSource DataSource, username Username, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, dataSource, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// UpdateUserPasswordWithBodyWithResponse request with arbitrary body returning *UpdateUserPasswordResponse
func (c *ClientWithResponses) UpdateUserPasswordWithBodyWithResponse(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserPasswordResponse, error) {
	rsp, err := c.UpdateUserPasswordWithBody(ctx, dataSource, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserPasswordWithResponse(ctx context.Context, dataSource DataSource, username Username, body UpdateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserPasswordResponse, error) {
	rsp, err := c.UpdateUserPassword(ctx, dataSource, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserPasswordResponse(rsp)
}

// GetUserPermissionsWithResponse request returning *GetUserPermissionsResponse
func (c *ClientWithResponses) GetUserPermissionsWithResponse(ctx context.Context, dataSource DataSource, username Username, reqEditors ...RequestEditorFn) (*GetUserPermissionsResponse, error) {
	rsp, err := c.GetUserPermissions(ctx, dataSource, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPermissionsResponse(rsp)
}

// ModifyUserPermissionsWithBodyWithResponse request with arbitrary body returning *ModifyUserPermissionsResponse
func (c *ClientWithResponses) ModifyUserPermissionsWithBodyWithResponse(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserPermissionsResponse, error) {
	rsp, err := c.ModifyUserPermissionsWithBody(ctx, dataSource, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserPermissionsResponse(rsp)
}

func (c *ClientWithResponses) ModifyUserPermissionsWithResponse(ctx context.Context, dataSource DataSource, username Username, body ModifyUserPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserPermissionsResponse, error) {
	rsp, err := c.ModifyUserPermissions(ctx, dataSource, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserPermissionsResponse(rsp)
}

// ModifyUserGroupsOfUserWithBodyWithResponse request with arbitrary body returning *ModifyUserGroupsOfUserResponse
func (c *ClientWithResponses) ModifyUserGroupsOfUserWithBodyWithResponse(ctx context.Context, dataSource DataSource, username Username, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserGroupsOfUserResponse, error) {
	rsp, err := c.ModifyUserGroupsOfUserWithBody(ctx, dataSource, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserGroupsOfUserResponse(rsp)
}

func (c *ClientWithResponses) ModifyUserGroupsOfUserWithResponse(ctx context.Context, dataSource DataSource, username Username, body ModifyUserGroupsOfUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserGroupsOfUserResponse, error) {
	rsp, err := c.ModifyUserGroupsOfUser(ctx, dataSource, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserGroupsOfUserResponse(rsp)
}

// CreateOrValidateTokenWithBodyWithResponse request with arbitrary body returning *CreateOrValidateTokenResponse
func (c *ClientWithResponses) CreateOrValidateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrValidateTokenResponse, error) {
	rsp, err := c.CreateOrValidateTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrValidateTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateOrValidateTokenWithFormdataBodyWithResponse(ctx context.Context, body CreateOrValidateTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateOrValidateTokenResponse, error) {
	rsp, err := c.CreateOrValidateTokenWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrValidateTokenResponse(rsp)
}

// DeleteTokenWithResponse request returning *DeleteTokenResponse
func (c *ClientWithResponses) DeleteTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*DeleteTokenResponse, error) {
	rsp, err := c.DeleteToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTokenResponse(rsp)
}

// ParseListActiveConnectionsResponse parses an HTTP response from a ListActiveConnectionsWithResponse call
func ParseListActiveConnectionsResponse(rsp *http.Response) (*ListActiveConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListActiveConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActiveConnections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteActiveConnectionResponse parses an HTTP response from a DeleteActiveConnectionWithResponse call
func ParseDeleteActiveConnectionResponse(rsp *http.Response) (*DeleteActiveConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActiveConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListConnectionGroupsResponse parses an HTTP response from a ListConnectionGroupsWithResponse call
func ParseListConnectionGroupsResponse(rsp *http.Response) (*ListConnectionGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectionGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConnectionGroupResponse parses an HTTP response from a CreateConnectionGroupWithResponse call
func ParseCreateConnectionGroupResponse(rsp *http.Response) (*CreateConnectionGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectionGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConnectionGroupResponse parses an HTTP response from a DeleteConnectionGroupWithResponse call
func ParseDeleteConnectionGroupResponse(rsp *http.Response) (*DeleteConnectionGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConnectionGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectionGroupResponse parses an HTTP response from a GetConnectionGroupWithResponse call
func ParseGetConnectionGroupResponse(rsp *http.Response) (*GetConnectionGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConnectionGroupResponse parses an HTTP response from a UpdateConnectionGroupWithResponse call
func ParseUpdateConnectionGroupResponse(rsp *http.Response) (*UpdateConnectionGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConnectionGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectionGroupTreeResponse parses an HTTP response from a GetConnectionGroupTreeWithResponse call
func ParseGetConnectionGroupTreeResponse(rsp *http.Response) (*GetConnectionGroupTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionGroupTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionGroupTree
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListConnectionsResponse parses an HTTP response from a ListConnectionsWithResponse call
func ParseListConnectionsResponse(rsp *http.Response) (*ListConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Connections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConnectionResponse parses an HTTP response from a CreateConnectionWithResponse call
func ParseCreateConnectionResponse(rsp *http.Response) (*CreateConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Connection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConnectionResponse parses an HTTP response from a DeleteConnectionWithResponse call
func ParseDeleteConnectionResponse(rsp *http.Response) (*DeleteConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectionResponse parses an HTTP response from a GetConnectionWithResponse call
func ParseGetConnectionResponse(rsp *http.Response) (*GetConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Connection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConnectionResponse parses an HTTP response from a UpdateConnectionWithResponse call
func ParseUpdateConnectionResponse(rsp *http.Response) (*UpdateConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectionParametersResponse parses an HTTP response from a GetConnectionParametersWithResponse call
func ParseGetConnectionParametersResponse(rsp *http.Response) (*GetConnectionParametersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionParameters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSelfResponse parses an HTTP response from a GetSelfWithResponse call
func ParseGetSelfResponse(rsp *http.Response) (*GetSelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSelfPermissionsResponse parses an HTTP response from a GetSelfPermissionsWithResponse call
func ParseGetSelfPermissionsResponse(rsp *http.Response) (*GetSelfPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Permissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUserGroupsResponse parses an HTTP response from a ListUserGroupsWithResponse call
func ParseListUserGroupsResponse(rsp *http.Response) (*ListUserGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserGroupResponse parses an HTTP response from a CreateUserGroupWithResponse call
func ParseCreateUserGroupResponse(rsp *http.Response) (*CreateUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserGroupResponse parses an HTTP response from a DeleteUserGroupWithResponse call
func ParseDeleteUserGroupResponse(rsp *http.Response) (*DeleteUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserGroupResponse parses an HTTP response from a GetUserGroupWithResponse call
func ParseGetUserGroupResponse(rsp *http.Response) (*GetUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserGroupResponse parses an HTTP response from a UpdateUserGroupWithResponse call
func ParseUpdateUserGroupResponse(rsp *http.Response) (*UpdateUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseModifyUserGroupMemberGroupsResponse parses an HTTP response from a ModifyUserGroupMemberGroupsWithResponse call
func ParseModifyUserGroupMemberGroupsResponse(rsp *http.Response) (*ModifyUserGroupMemberGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyUserGroupMemberGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseModifyUserGroupMembersResponse parses an HTTP response from a ModifyUserGroupMembersWithResponse call
func ParseModifyUserGroupMembersResponse(rsp *http.Response) (*ModifyUserGroupMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyUserGroupMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserGroupPermissionsResponse parses an HTTP response from a GetUserGroupPermissionsWithResponse call
func ParseGetUserGroupPermissionsResponse(rsp *http.Response) (*GetUserGroupPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Permissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyUserGroupPermissionsResponse parses an HTTP response from a ModifyUserGroupPermissionsWithResponse call
func ParseModifyUserGroupPermissionsResponse(rsp *http.Response) (*ModifyUserGroupPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyUserGroupPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListUsersResponse parses an HTTP response from a ListUsersWithResponse call
func ParseListUsersResponse(rsp *http.Response) (*ListUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Users
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateUserPasswordResponse parses an HTTP response from a UpdateUserPasswordWithResponse call
func ParseUpdateUserPasswordResponse(rsp *http.Response) (*UpdateUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserPermissionsResponse parses an HTTP response from a GetUserPermissionsWithResponse call
func ParseGetUserPermissionsResponse(rsp *http.Response) (*GetUserPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Permissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyUserPermissionsResponse parses an HTTP response from a ModifyUserPermissionsWithResponse call
func ParseModifyUserPermissionsResponse(rsp *http.Response) (*ModifyUserPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyUserPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseModifyUserGroupsOfUserResponse parses an HTTP response from a ModifyUserGroupsOfUserWithResponse call
func ParseModifyUserGroupsOfUserResponse(rsp *http.Response) (*ModifyUserGroupsOfUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyUserGroupsOfUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateOrValidateTokenResponse parses an HTTP response from a CreateOrValidateTokenWithResponse call
func ParseCreateOrValidateTokenResponse(rsp *http.Response) (*CreateOrValidateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrValidateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTokenResponse parses an HTTP response from a DeleteTokenWithResponse call
func ParseDeleteTokenResponse(rsp *http.Response) (*DeleteTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
